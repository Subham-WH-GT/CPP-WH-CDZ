Q.(Program to find factorial using the concept of recursion with time and space complexity)?
#include<iostream>
using namespace std;
int factorial(int a){
  if(a==1){
  return 1;
  }
  int ans=a*factorial(a-1);
  return ans;
  }
int main()
{
int a;
cout<<"Enter a number to find its factorial:";
cin>>a;
cout<<"Factorial of the given number is:\n";
cout<<factorial(a)<<endl;
return 0;
}
/*

---in recursion when a function ll be called
     it wil always be added in stack memory..
    and the stack creates space...so recursion
     takes space...

---in recursion,time complexity is always 
     calculated by finding the time for one function 
     and then multiplying the total number of times
     the function is called.
     
 in this problem, space complexity 
   for each function called,a stack space is added
   for input number=n
   main->calls->n->calls->n-1->calls->n-2
   for n=4;
   main->calls->4(1 space added)->calls->3(2 space added)->calls->
   2(3 space added)->calls->1(4 space added)->returns to main
   hence for n number n space is added;
   hence time complexity=O(n);
   
   time complexity;
   for one function called time taken be t
   for  n input n times function is called
   so timecomp.=n*t(since t is constant)
   time comp=O(n);