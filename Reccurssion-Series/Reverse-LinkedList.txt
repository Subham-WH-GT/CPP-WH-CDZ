Q.(Reversing a Linked-list using recursion)?
#include<iostream>
using namespace std;
class node{
           public:
                int data;
                node* next;
                node(int val){
                 data=val;
                 next=NULL;
                 }
                };
void elements(node * &head,int a){
node * n=new node(a);
if(head==NULL){
head=n;
return;
}
node* temp=head;
while(temp->next!= NULL){
temp=temp->next;
}
temp->next=n;
}
void display(node *&head){
if(head==NULL){
cout<<"Linked-list doesn't contain any elements!";
cout<<endl;
return;
}
node *temp=head;
while(temp !=NULL){
cout<<temp->data<<" ";
temp=temp->next;
}
cout<<endl;
}
node *reverse(node *&head){
if(head==NULL || head->next==NULL){
return head;
}
node* newhead=reverse(head->next);
head->next->next=head;
head->next=NULL;
return newhead;
}
int main(){
node *head=NULL;
elements(head,1);
elements(head,2);
elements(head,3);
elements(head,4);
cout<<"Elements of the list are:\n";
display(head);
node* newhead=reverse(head);
cout<<"Reverse of the list is:\n";
display(newhead);  
cout<<endl;
return 0;
}